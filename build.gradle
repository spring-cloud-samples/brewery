buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven {
            url "http://repo.spring.io/snapshot"
        }
        maven {
            url "http://repo.spring.io/milestone"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:+"
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

def commonProject = project(':common')
def acceptanceTestsProject = project(':acceptance-tests')
def zipkinServerProject = project(':zipkin-server')
def eurekaProject = project(':eureka')
def configServerProject = project(':config-server')
def techProjects = [commonProject, eurekaProject, zipkinServerProject, configServerProject]
def nonZipkinProjects = techProjects - zipkinServerProject
def nonDockerProjects = [commonProject, acceptanceTestsProject]
def zipkinRelatedProjects = subprojects - nonZipkinProjects

configure(subprojects) {

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'spring-boot'

    ext {
        dockerConfiguration = { int port ->
            int debugPort = port-1000
            dependsOn 'build'
            dryRun true
            addFile("${libsDir}/${project.name}-${buildNrLoc}.jar", "/${project.name}/${project.name}.jar")
            exposePort(port)
            exposePort(debugPort)
            // Random beacuse of https://wiki.apache.org/tomcat/HowTo/FasterStartUp
            entryPoint(['java', '-Xmx64m', '-Xss1024k',
                        "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$debugPort",
                        '-Djava.security.egd=file:/dev/./urandom', '-jar', "/${project.name}/${project.name}.jar"])
        }
        createDockerTaskWithPort = { int port ->
            project.task([type: Docker], "docker", ext.dockerConfiguration.curry(port))
        }
        systemPropsFromGradle = {
            project.gradle.startParameter.systemPropertiesArgs.entrySet().collect{"-D${it.key}=${it.value}"}
        }
        whatToTest = { String propName ->
            String whatToTestProp = "WHAT_TO_TEST"
            return propName.equalsIgnoreCase(project.gradle.startParameter.systemPropertiesArgs.get(whatToTestProp)) ?:
                    propName.equalsIgnoreCase(System.getenv(whatToTestProp))
        }
        moduleEnabled = { boolean enabled ->
            if (!enabled) {
                project.tasks*.enabled = false
            }
        }
    }

    ext {
        buildNrLoc = project.hasProperty('buildNr') ? "${buildNr}" : "CD-000"
    }

    group = 'io.spring.cloud.samples.brewery'
    version = buildNrLoc

    sourceCompatibility = '1.8'

    configurations {
        all {
            resolutionStrategy {
                eachDependency { DependencyResolveDetails details ->
                    // To prevent an accidental usage of groovy-all.jar and groovy.jar in different versions
                    // all modularized Groovy jars are replaced with groovy-all.jar by default.
                    if (details.requested.group == 'org.codehaus.groovy' && details.requested.name != "groovy-all") {
                        details.useTarget("org.codehaus.groovy:groovy-all:${details.requested.version}")
                    }
                }
            }
        }
    }

    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "http://repo.spring.io/snapshot"
        }
        maven {
            url "http://repo.spring.io/milestone"
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-starter-parent:$BOM_VERSION"
        }
    }
}

configure(subprojects - zipkinServerProject - acceptanceTestsProject) {

    dependencies {
        compile 'org.projectlombok:lombok:1.16.6'
        compile "org.springframework.boot:spring-boot-starter-web"
        compile "org.springframework:spring-web"
        compile 'org.apache.tomcat.embed:tomcat-embed-core:8.0.23'
        compile "org.springframework.cloud:spring-cloud-starter-sleuth"
        compile "org.springframework.cloud:spring-cloud-starter-config"
        compile "org.springframework.cloud:spring-cloud-starter-hystrix"
        compile "org.springframework.cloud:spring-cloud-starter-stream-rabbit"
        compile "org.springframework.cloud:spring-cloud-sleuth-stream"
    }
}

configure(zipkinRelatedProjects) {

    dependencies {
        if (whatToTest('SLEUTH')) { compile "org.springframework.cloud:spring-cloud-starter-zipkin" }
    }
}

configure(nonDockerProjects) {

    bootRepackage {
        enabled = false
    }

    bootRun {
        enabled = false
    }
}

configure(subprojects - nonDockerProjects) {

    apply plugin: 'docker'

    docker {
        baseImage 'frolvlad/alpine-oraclejdk8'
    }
}

configure(subprojects - techProjects) {

    dependencies {
        compile(commonProject)

        compile "org.springframework.boot:spring-boot-starter-web"
        compile "org.springframework.boot:spring-boot-starter-actuator"
        compile "org.springframework:spring-context-support"
        compile 'com.fasterxml.jackson.core:jackson-databind'
        if (!whatToTest('CONSUL') && !whatToTest('EUREKA')) {
            compile "org.springframework.cloud:spring-cloud-starter-zookeeper-discovery"
        }
        if (whatToTest('CONSUL')) { compile "org.springframework.cloud:spring-cloud-starter-consul-discovery" }
        if (whatToTest('EUREKA')) { compile "org.springframework.cloud:spring-cloud-starter-eureka" }
        compile "org.springframework.cloud:spring-cloud-starter-feign"
        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonMapper"
        compile "org.codehaus.jackson:jackson-core-asl:$jacksonMapper"
        compile 'org.apache.commons:commons-lang3:3.4'
        compile 'com.jayway.jsonpath:json-path-assert:2.0.0'
        compile 'org.yaml:snakeyaml'
        compile 'org.hibernate:hibernate-validator'
        compile "org.aspectj:aspectjrt"

        runtime 'cglib:cglib-nodep:3.1'
        runtime 'org.objenesis:objenesis:2.2'
        runtime 'org.aspectj:aspectjweaver'
    }

    wrapper {
        gradleVersion '2.10'
    }

    bootRun {
        jvmArgs = systemPropsFromGradle()
    }

    test {
        jvmArgs systemPropsFromGradle()
        testLogging {
            exceptionFormat = 'full'
            showStandardStreams = true
        }
    }
}
