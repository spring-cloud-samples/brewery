buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			url "https://repo.spring.io/snapshot"
		}
		maven {
			url "https://repo.spring.io/milestone"
		}
		maven {
			url "https://repo.spring.io/release"
		}
	}

	Closure<String> getProp = { String propName ->
		return System.properties[propName] ?:
				project.gradle.startParameter.systemPropertiesArgs.get(propName) ?:
						hasProperty(propName) ? getProperty(propName) :
						project.getProperty(propName) ?: ""
	}

	String bootVersion = getProp("BOOT_VERSION")
	logger.lifecycle("BOOT_VERSION is: [${bootVersion}]")

	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${bootVersion}"
		if (hasProperty("docker")) { classpath 'se.transmode.gradle:gradle-docker:1.2' }
	}
}

allprojects {
	apply plugin: 'java'


	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

configure(subprojects) {

	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	ext {
		systemPropsFromGradle = {
			project.gradle.startParameter.systemPropertiesArgs.entrySet().collect{"-D${it.key}=${it.value}"}
		}
		systemPropsFromGradleContains = { String key ->
			project.gradle.startParameter.systemPropertiesArgs.containsKey(key)
		}
		whatToTest = { String propName ->
			String whatToTestProp = "WHAT_TO_TEST"
			return propName.equalsIgnoreCase(project.gradle.startParameter.systemPropertiesArgs.get(whatToTestProp)) ?:
					propName.equalsIgnoreCase(System.getenv(whatToTestProp))
		}
		propOrSysEnvPresent = { String propName ->
			project.hasProperty(propName) || systemPropsFromGradleContains(propName) || System.getenv(propName.toUpperCase())
		}
		moduleEnabled = { boolean enabled ->
			if (!enabled) {
				project.tasks*.enabled = false
			}
		}
		buildNrLoc = project.hasProperty('buildNr') ? "${buildNr}" : "1.0.0"
	}

	group = 'io.spring.cloud.samples.brewery'
	version = buildNrLoc

	configurations {
		all {
			resolutionStrategy {
				eachDependency { DependencyResolveDetails details ->
					// To prevent an accidental usage of groovy-all.jar and groovy.jar in different versions
					// all modularized Groovy jars are replaced with groovy-all.jar by default.
					if (details.requested.group == 'org.codehaus.groovy' && details.requested.name != "groovy-all") {
						details.useTarget("org.codehaus.groovy:groovy-all:${details.requested.version}")
					}
				}
			}
		}
	}

	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			url "https://repo.spring.io/snapshot"
		}
		maven {
			url "https://repo.spring.io/milestone"
		}
		maven {
			url "https://repo.spring.io/release"
		}
	}

	dependencyManagement {
		imports {
			Closure<String> getProp = { String propName -> System.properties[propName] ?:
					project.gradle.startParameter.systemPropertiesArgs.get(propName) ?:
							hasProperty(propName) ? property(propName) :
									System.getenv(propName) ?: project.getProperty(propName) ?: ""
			}
			// will come from Boot
//			mavenBom "io.micrometer:micrometer-bom:1.10.0-SNAPSHOT"
//			mavenBom "io.micrometer:micrometer-tracing-bom:1.0.0-SNAPSHOT"
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${getProp("BOM_VERSION") }"
			if (getProp("BOOT_VERSION")) {
				String bootVersion = getProp("BOOT_VERSION")
				logger.lifecycle("Using boot in version [${bootVersion}]")
				mavenBom "org.springframework.boot:spring-boot-dependencies:${bootVersion}"
			}
		}
	}

	dependencies {
		implementation "org.springframework.boot:spring-boot-starter-actuator"
		if (!whatToTest('CONSUL') && !whatToTest('EUREKA')) {
			implementation "org.springframework.cloud:spring-cloud-starter-zookeeper-discovery"
		}
		if (whatToTest('CONSUL')) { implementation "org.springframework.cloud:spring-cloud-starter-consul-discovery" }
		implementation "org.springframework.cloud:spring-cloud-starter-stream-${propOrSysEnvPresent('kafka') ? 'kafka' : 'rabbit'}"
		implementation 'org.apache.commons:commons-lang3:3.4'
		implementation("org.springframework.cloud:spring-cloud-starter-openfeign")
		implementation "org.springframework:spring-messaging"

		// Why is this needed?
		implementation 'com.jayway.jsonpath:json-path-assert:2.0.0'
		implementation 'org.yaml:snakeyaml'
		implementation "org.aspectj:aspectjrt"
		implementation 'cglib:cglib-nodep:3.1'
		implementation 'org.objenesis:objenesis:2.2'
		implementation 'org.aspectj:aspectjweaver'

		// Observability
		implementation 'io.micrometer:micrometer-registry-prometheus'
		implementation 'io.micrometer:micrometer-tracing'
		// TODO: Add OTel version
		implementation 'io.micrometer:micrometer-tracing-bridge-brave'
		if (whatToTest('WAVEFRONT')) { implementation("io.micrometer:micrometer-tracing-reporter-wavefront") }
		if (!whatToTest('WAVEFRONT')) { implementation 'io.zipkin.reporter2:zipkin-reporter-brave' }

		testImplementation(group: 'org.springframework.cloud', name: 'spring-cloud-stream', classifier: 'test-binder')
	}

	task allDeps(type: DependencyReportTask) {}

	java {
		// It is more idiomatic to define different features for different sets of optional
		// dependencies, e.g., 'dropwizard' and 'reactor'. If this library published Gradle
		// metadata, Gradle users would be able to use these feature names in their dependency
		// declarations instead of understanding the actual required optional dependencies.
		// But we don't publish Gradle metadata yet and this may be overkill so just have a
		// single feature for now to correspond to any optional dependency.
		registerFeature('optional') {
			usingSourceSet(sourceSets.main)
		}

	}

	test {
		jvmArgs systemPropsFromGradle()
		testLogging {
			exceptionFormat = 'full'
			showStandardStreams = true
		}
	}
}


logger.lifecycle("WHAT_TO_TEST is: System prop: [${project.gradle.startParameter.systemPropertiesArgs.get("WHAT_TO_TEST")}] , Env prop: [${System.getenv("WHAT_TO_TEST")}]")
logger.lifecycle("BOM_VERSION is: [${getProp("BOM_VERSION")}]")

String getProp(String propName) {
	return System.properties[propName] ?:
			project.gradle.startParameter.systemPropertiesArgs.get(propName) ?:
					hasProperty(propName) ? property(propName) :
							System.getenv(propName) ?: ""
}
